import { globby } from 'globby';
import matter from 'gray-matter';
import fs from 'fs';
import path from 'path';

interface StatementFrontmatter {
  id: string;
  date: string;
  title: string;
  type: 'meeting' | 'longer-run-goals' | 'minutes' | 'other';
  url?: string;
}

async function generateStatements() {
  console.log('Generating statements...');
  
  const statementFiles = await globby('data/statements/**/*.md');
  const statements = [];

  for (const file of statementFiles) {
    const content = fs.readFileSync(file, 'utf-8');
    const { data, content: markdownContent } = matter(content);
    const frontmatter = data as StatementFrontmatter;

    statements.push({
      id: frontmatter.id,
      date: frontmatter.date,
      title: frontmatter.title,
      type: frontmatter.type,
      content: markdownContent.trim(),
      url: frontmatter.url,
    });
  }

  // Sort by date descending
  statements.sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime());

  const generatedContent = `// This file is auto-generated by scripts/generate-statements.ts
// Do not edit manually - edit the Markdown files in data/statements/ instead

import type { FOMCStatement } from '../types';

export const statements: FOMCStatement[] = ${JSON.stringify(statements, null, 2)};
`;

  const outputPath = path.join(process.cwd(), 'src/data/generated-statements.ts');
  
  // Ensure the directory exists
  const outputDir = path.dirname(outputPath);
  if (!fs.existsSync(outputDir)) {
    fs.mkdirSync(outputDir, { recursive: true });
  }
  
  fs.writeFileSync(outputPath, generatedContent, 'utf-8');
  console.log(`Generated ${statements.length} statements to ${outputPath}`);
}

generateStatements().catch(console.error);