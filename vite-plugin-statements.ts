import { Plugin } from 'vite';
import { globby } from 'globby';
import matter from 'gray-matter';
import fs from 'fs';
import path from 'path';

interface StatementFrontmatter {
  id: string;
  date: string;
  title: string;
  type: 'meeting' | 'longer-run-goals' | 'minutes' | 'other';
  url?: string;
}

export function statementsPlugin(): Plugin {
  return {
    name: 'statements-plugin',
    buildStart: async () => {
      const statementFiles = await globby('data/statements/**/*.md');
      const statements = [];

      for (const file of statementFiles) {
        const content = fs.readFileSync(file, 'utf-8');
        const { data, content: markdownContent } = matter(content);
        const frontmatter = data as StatementFrontmatter;

        statements.push({
          id: frontmatter.id,
          date: frontmatter.date,
          title: frontmatter.title,
          type: frontmatter.type,
          content: markdownContent.trim(),
          url: frontmatter.url,
        });
      }

      // Sort by date descending
      statements.sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime());

      const generatedContent = `// This file is auto-generated by vite-plugin-statements
// Do not edit manually - edit the Markdown files in data/statements/ instead

import type { FOMCStatement } from '../types';

export const statements: FOMCStatement[] = ${JSON.stringify(statements, null, 2)};
`;

      const outputPath = path.join(process.cwd(), 'src/data/generated-statements.ts');
      fs.writeFileSync(outputPath, generatedContent, 'utf-8');
    },
    configureServer: (server) => {
      // Watch for changes in statement files during development
      server.middlewares.use('/api/regenerate-statements', async (req, res, next) => {
        if (req.method === 'POST') {
          // Regenerate statements when files change
          await regenerateStatements();
          res.statusCode = 200;
          res.end('OK');
        } else {
          next();
        }
      });
    },
  };
}

async function regenerateStatements() {
  // Same logic as buildStart but for development
  const statementFiles = await globby('data/statements/**/*.md');
  const statements = [];

  for (const file of statementFiles) {
    const content = fs.readFileSync(file, 'utf-8');
    const { data, content: markdownContent } = matter(content);
    const frontmatter = data as StatementFrontmatter;

    statements.push({
      id: frontmatter.id,
      date: frontmatter.date,
      title: frontmatter.title,
      type: frontmatter.type,
      content: markdownContent.trim(),
      url: frontmatter.url,
    });
  }

  statements.sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime());

  const generatedContent = `// This file is auto-generated by vite-plugin-statements
// Do not edit manually - edit the Markdown files in data/statements/ instead

import type { FOMCStatement } from '../types';

export const statements: FOMCStatement[] = ${JSON.stringify(statements, null, 2)};
`;

  const outputPath = path.join(process.cwd(), 'src/data/generated-statements.ts');
  fs.writeFileSync(outputPath, generatedContent, 'utf-8');
}